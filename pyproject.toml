[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "opti_scout"
description = 'Project to optimize the allocation of scout groups to activities'
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = []
authors = [
  { name = "Torben Skov" },
  { name = "Richard Oberdieck", email = "r.oberdieck@gmail.com"}
]
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "pydantic",
  "pandas",
  "plotly",
  "numpy",
  "shapely",
  "streamlit",
  "cffi",
  "mip",
]
dynamic = ["version"]

[project.urls]
Documentation = "https://github.com/RichardOberdieck/opti_scout/blob/main/README.md"
Issues = "https://github.com/RichardOberdieck/opti_scout/issues"
Source = "https://github.com/RichardOberdieck/opti_scout"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
path = "opti_scout/__init__.py"

[tool.hatch.build]
include = [       
   "opti_scout/*.py",
]

[project.optional-dependencies]
cli = [
  "click"
]
notebook = [
  "jupyter"
]
test = [
  "pytest",
  "pytest-cov",
  "pre-commit",
  "hypothesis"
]

[tool.hatch.envs.default]
installer = "uv"

[tool.hatch.envs.test]
dependencies = ["opti_scout[test]"]

[tool.hatch.envs.test.scripts]
base = "pytest {args}"
code_check = "pre-commit run --all-files"
performance = "python tests/performance.py"

[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12", "3.13"]

[tool.hatch.envs.cli]
dependencies = ["opti_scout[cli]"]

[tool.hatch.envs.cli.scripts]
run = "python -m interfaces.cli {args}"

[tool.hatch.envs.notebook]
dependencies = ["opti_scout[notebook]"]

[tool.hatch.envs.notebook.scripts]
run = "jupyter notebook"

[tool.coverage.run]
branch = true
parallel = true
omit = [
  "opti_scout/__init__.py",
  "tests/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
fail_under = 90

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py312"
